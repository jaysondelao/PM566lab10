---
title: "Lab 10-SQL"
author: "Jayson De La O"
format:
  html:
    embed-resources: true
---



```{r}

library(RSQLite)
library(DBI)

# Initialize a temporary in memory database
con <- dbConnect(SQLite(), ":memory:")

# Download tables
actor <- read.csv("https://raw.githubusercontent.com/ivanceras/sakila/master/csv-sakila-db/actor.csv")
rental <- read.csv("https://raw.githubusercontent.com/ivanceras/sakila/master/csv-sakila-db/rental.csv")
customer <- read.csv("https://raw.githubusercontent.com/ivanceras/sakila/master/csv-sakila-db/customer.csv")
payment <- read.csv("https://raw.githubusercontent.com/ivanceras/sakila/master/csv-sakila-db/payment_p2007_01.csv")

# Copy data.frames to database
dbWriteTable(con, "actor", actor)
dbWriteTable(con, "rental", rental)
dbWriteTable(con, "customer", customer)
dbWriteTable(con, "payment", payment)

```

```{r}
dbListTables(con)
```



```{sql, connection=con}
PRAGMA table_info(actor)
```

Exercise 1
Edit the code below to retrieve the actor ID, first name and last name for all actors using the actor table. Sort by last name and then by first name (note that the code chunk below is set up to run SQL code rather than R code).

```{sql, connection=con}
SELECT  actor_id, first_name, last_name
FROM actor
ORDER by last_name


```

```{sql, connection=con}
SELECT  actor_id, first_name, last_name
FROM actor
ORDER by first_name


```
Exercise 2
Retrieve the actor ID, first name, and last name for actors whose last name equals ‘WILLIAMS’ or ‘DAVIS’.

```{sql, connection=con}
SELECT actor_id, first_name, last_name
FROM actor
WHERE last_name IN ('WILLIAMS', 'DAVIS')

```

Exercise 3
Write a query against the rental table that returns the IDs of the customers who rented a film on July 5, 2005 (use the rental.rental_date column, and you can use the date() function to ignore the time component). Include a single row for each distinct customer ID.

Looking at the structure of rental
#```{sql, connection=con}
SELECT *
FROM rental

```

```{sql, connection=con}

SELECT DISTINCT rental_id
FROM rental
WHERE date(rental_date) = '2005-07-05'

```
Exercise 4
4.1
Construct a query that retrieves all rows from the payment table where the amount is either 1.99, 7.99, 9.99.


looking at structure of payment
#```{sql, connection=con}
SELECT *
FROM payment

```


```{sql, connection=con}
SELECT *
FROM payment
WHERE amount IN (1.99, 7.99, 9.99)

```

4.2 Construct a query that retrieves all rows from the payment table where the amount is greater then 5.
```{sql, connection=con}
SELECT *
FROM payment
WHERE amount > 5

```

Construct a query that retrieves all rows from the payment table where the amount is greater then 5 and less then 8.
```{sql, connection=con}
SELECT *
FROM payment
WHERE amount >5 AND amount <8

```

Exercise 5
Retrieve all the payment IDs and their amounts from the customers whose last name is ‘DAVIS’.

```{sql, connection=con}
SELECT *
FROM payment

```

```{sql, connection=con}
SELECT *
FROM customer

```



```{sql, connection=con}
SELECT payment.payment_id, payment.amount
FROM payment
  INNER JOIN customer 
WHERE payment.customer_id=customer.customer_id AND customer.last_name IN ( 'DAVIS')



```


```{sql, connection=con}
SELECT *
FROM rental

```


Exercise 6.1
Use COUNT(*) to count the number of rows in rental.


```{sql, connection=con}
SELECT COUNT(*) 
FROM rental


```
Exercise 6.2
Use COUNT(*) and GROUP BY to count the number of rentals for each customer_id.
```{sql, connection=con}
SELECT COUNT(*), customer_id
FROM rental
GROUP BY customer_id


```

6.3
Repeat the previous query and sort by the count in descending order.
```{sql, connection=con}
SELECT COUNT(*), customer_id
FROM rental
GROUP BY customer_id
ORDER BY COUNT(*) DESC

```

6.4
Repeat the previous query but use HAVING to only keep the groups with 40 or more.
```{sql, connection=con}
SELECT COUNT(*), customer_id
FROM rental
GROUP BY customer_id 
HAVING COUNT(*) >=40
ORDER BY COUNT(*) DESC


```
```{sql, connection=con}
SELECT *
FROM payment

```

Exercise 7
The following query calculates a number of summary statistics for the payment table using MAX, MIN, AVG and SUM
```{sql, connection=con}
SELECT
MAX(amount) AS MAX_amount,
MIN(amount) AS MIN_amount,
AVG(amount) AS AVG_amount,
SUM(amount) AS SUM_amount
FROM payment

```

7.1
Modify the above query to do those calculations for each customer_id.

```{sql, connection=con}
SELECT customer_id,
MAX(amount) AS MAX_amount,
MIN(amount) AS MIN_amount,
AVG(amount) AS AVG_amount,
SUM(amount) AS SUM_amount
FROM payment
GROUP BY customer_id 


```
7.2
Modify the above query to only keep the customer_ids that have more then 5 payments.
```{sql, connection=con}
SELECT customer_id,
MAX(amount) AS MAX_amount,
MIN(amount) AS MIN_amount,
AVG(amount) AS AVG_amount,
SUM(amount) AS SUM_amount
FROM payment
GROUP BY customer_id 
HAVING count(*) >5



```

Run the following chunk to disconnect from the connection.

```{r}
# clean up
dbDisconnect(con)
```

